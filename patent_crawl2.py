import json
import requests
import pandas as pd
from tqdm import tqdm
import math
import os
import time

headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '
                  'Chrome/75.0.3770.142 Safari/537.36',
    # 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0'
}
url = 'http://www.patentstar.com.cn/frmLogin.aspx'
formData = {
    '__VIEWSTATE': '/wEPDwULLTIxMjczOTU5MTZkGAEFHl9fQ29udHJvbHNSZXF1aXJlUG9zdEJhY2tLZXlfXxYBBRBJbWFnZUJ1dHRvbkxvZ2luC2xRT0YKcJQS7UQd/R7BshXE2tAtEKBzGVEEnzeAW9s=',
    '__EVENTVALIDATION': '/wEWBAKXwZiEAwLQ59eABwLSxeCRDwLz+OWrDuSTAvmYg6RB2pBdehCzB8X7N28/bCmCf6Kbt6/huU5x',
    'TextBoxAccount': '15625140490',
    'Password': 'cjb1148581147',
    'ImageButtonLogin.x': '45',
    'ImageButtonLogin.y': '22'
}

patentHeader = {
    'POST': '/comm/GetList.aspx/GetPageList HTTP/1.1',
    'Host': 'www.patentstar.com.cn',
    'Connection': 'keep-alive',
    'Content-Length': '118',
    'Accept': 'application/json, text/javascript, */*; q=0.01',
    'Origin': 'http://www.patentstar.com.cn',
    'X-Requested-With': 'XMLHttpRequest',
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36',
    # 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0',
    'Content-Type': 'application/json; charset=UTF-8',
    'Accept-Encoding': 'gzip, deflate',
    'Accept-Language': 'zh-CN,zh-TW;q=0.9,zh;q=0.8,en-US;q=0.7,en;q=0.6',
    # 'Referer': 'http://www.patentstar.com.cn/My/frmPatentList.aspx?db=CN&No={}&kw=G99&Nm=17&etp=&Query=%20(G99%2FIC)&Qsrc=3'.format(NoNumber),
    # 'Cookie': 'ASP.NET_SessionId=xksewxyjiygxpw3vv0aujxqc; UM_distinctid=16e816946db9-0cf68342b1ee25-4c302b7a-1fa400-16e816946dd344; CNZZDATA4400375=cnzz_eid%3D607432909-1574128285-%26ntime%3D1574128285'
    'Cookie': 'UM_distinctid=16e69966402364-0ca3815d7c2f19-5e4f281b-1fa400-16e699664034bf; ASP.NET_SessionId=tipauqiwgwzecbksrlss0y20; CNZZDATA4400375=cnzz_eid%3D1074905393-1573728956-%26ntime%3D1574253167'
}
patentUrl = 'http://www.patentstar.com.cn/comm/GetList.aspx/GetPageList'


class Crawl:
    # 创建一个会话session,用于保存cookie信息，后续的请求利用session来发送
    session = requests.session()
    totalNum = 0

    def __init__(self, url, headers, formData):
        request = self.session.post(url=url, headers=headers, data=formData)
        if request.status_code == 200:
            print('连接成功！')
        pass

    def get_patent(self, patent_header, patent_url, patent_data):
        # try:
        #     response = self.session.post(patent_url, headers=patent_header, data=patent_data)
        # except (ConnectionError, TimeoutError) as e:
        #     time_sleep = 0
        #     while True:
        #         print(e)
        #         print("retrying...")
        #         time_sleep += 1
        #         time.sleep(3)
        #         try:
        #             response = self.session.post(patent_url, headers=patent_header, data=patent_data)
        #         except (ConnectionError, TimeoutError) as e:
        #             time_sleep += 1
        #             if time_sleep == 100:
        #                 print("奇奇怪怪的问题发生了...")
        #                 break
        #             continue
        response = self.session.post(patent_url, headers=patent_header, data=patent_data)
        # print(response.status_code)
        jsonData = response.json()
        # print(jsonData)
        df = self.get_response_data(response=jsonData, header=patent_header)
        return df

    def get_state(self, patent_header, appNo):
        valid = b'GIF89a\x1d\x00\x0f\x00\xf7\x00\x00\x8d\xba7\x88\xb85\x84\xb53\xdf\xe5g\xd6\xe1_\xc7\xdbW\xbe\xd8Q\xbf\xd7R\xb2\xd4I\xad\xd3N\xae\xd3J\xa9\xd1E\xa5\xcfD\xa3\xc9Q\xa4\xc9B\xa2\xc9B\xa2\xc8A\x96\xc0L\x94\xc0;\x85\xb4:\x9c\xc5?\xd1\xde\\\xa6\xcbC\x8c\xbb8\x99\xc3=\x9f\xc7@\x80\xb32\x87\xb75\x90\xbd9\x83\xb53\xca\xdcX\x8b\xba7\xbd\xd8T\xa1\xc8A\xad\xd2H\xac\xd2H\xd9\xe1`\xb3\xd4J\x8a\xb96\xa6\xcbT\x9a\xc3>\xa7\xccT\x85\xb64\x98\xc2=\xb6\xd6Q\xb8\xd6N\xbd\xd7Q\x8f\xbc9\xc0\xd8S\xb4\xd5M\x8b\xb97\xaf\xd3I\xc4\xd9U\xbe\xd8U\xa7\xccD\xd0\xdd[\xa0\xc8A\xc9\xdbX\xbc\xd7P\xc5\xdaU\xad\xd0F\xa8\xccD\xbb\xd7P\xae\xd1G\x88\xb75\x83\xb43\xc2\xdaT\xb6\xd5M\x9e\xc5O\x93\xbdJ\xb7\xd6M\xb9\xd6O\x9a\xc3=\xd6\xdf^\xa7\xcbD\xb8\xd6R\xa7\xd0I\x9c\xc7?\x99\xc2M\xa9\xd2F\xb1\xd4O\x9f\xc7A\x8f\xbbI\xb9\xd8K\xad\xd3I\xc4\xdcT\xbc\xd5P\xaf\xd3G\xa8\xccT\xa3\xcbB\xa1\xc9A\xb0\xd3K\x91\xbd9|\xaf/\xa1\xcfF\x9d\xc5@\xb6\xd5N\x9a\xc4>\x9a\xc5>\xd9\xe3c\xba\xd6R\xb5\xd4L\xd8\xe1a\x95\xc0<\xb2\xd5L\xaa\xd1K\xa8\xd1L\x99\xc3<\xb3\xd1L\xdb\xe2c\xbb\xd7T\xc3\xd9U\x93\xbe:\x9d\xce@\xab\xcfE\xad\xd0G\xa8\xcdD\xc8\xdbV\x81\xb43\xba\xd6P\xae\xd2I\xb0\xd4M\xda\xe2b\xcc\xdcY\xa2\xd0H\xb0\xd5O\xad\xd3L\xa9\xd0F~\xb21\xa6\xcaS\x98\xc2L\xb8\xd6K\x85\xb5>\xa4\xcbC\x83\xb38\x82\xb32\x9b\xc5>\xcd\xddZ\x9d\xceH\xcf\xdeZ\xad\xd2G\x9f\xcfG\xa1\xcfB\xab\xd0F\xc9\xdcX\x8d\xbd8\xca\xdeY\x83\xb54\x91\xbe9\xa2\xd0B\xa7\xd0E\x93\xbf:\xbc\xd8Q\x9b\xc4N\xbf\xd8R\xc2\xd8S\x82\xb42\x82\xb43\xa4\xcfC\x83\xb42\xa0\xc9@\xa0\xc7Q\xd3\xdf\\\xb1\xd3H\xb2\xd3K\xbd\xd7R\xb9\xd8L\xbb\xd9N\xbb\xdaM\x9e\xc8F|\xaf0\xa0\xceE\xa3\xcfG\x88\xb86\xaa\xcdE\x90\xbcI\xab\xcdG\x92\xbeJ\xb7\xd6N\x9a\xc4?\xb7\xd8J\x9b\xc5?\xca\xdcW\xc6\xdaU\x8e\xbaM\xa5\xd1J\xd8\xe1_\xd8\xe0`\x9e\xcdD\xb4\xd5P\xdc\xe3d\xdd\xe2d\x8b\xba8\xdd\xe3e\x99\xccB\xb9\xd7O\xab\xd2M\x9e\xc6@\xa8\xcbT\xb5\xd5J\xb7\xd7K\xb2\xd5J\xc2\xd9T\xc2\xd9U\x9d\xc6@\xc3\xd9T\x8e\xbc8\x8e\xbd8\x92\xbf:\xb5\xd6M\x92\xbf;\xcf\xddZ\xa1\xc8Q\x9f\xceB\x9c\xc4P\xcb\xdcY\x9e\xc6P\xad\xd1G\xc0\xd8R\xdd\xe3d\xc1\xd8S\xa9\xcdD\x97\xc2<\xa1\xc9B\x86\xb64\xca\xdbW\xa8\xd1J\xb3\xd4K\x8a\xba6\xb0\xd4J\xb1\xd4J\xb1\xd4K\xb3\xd3L\x9c\xc4@\x9c\xc5@\x9c\xc5>\x8c\xb9F\xbd\xd8U\xa9\xcdU\x87\xb85\xcd\xddY\x8e\xbaH\xc4\xd9T\xb3\xd5O\xbf\xd8U\x8d\xbb8\xbb\xd6S\xa9\xceD\xac\xd2L\xae\xd2G\xa9\xd1G\xa8\xceF}\xb10\xaa\xceE\xa5\xcaR\xff\xff\xff!\xf9\x04\x00\x00\x00\x00\x00,\x00\x00\x00\x00\x1d\x00\x0f\x00\x00\x08\xff\x00\x15\xf1\xf2\xc2D\x1c\xbe<\xf3X,\xb1\x07\x02D\rz5\xda\x81pC\x86E/(~\xd20a\xb5JX\xa3j\x9e\x16\x8c\x98\x11C\xd6\x1dL\x07\xb8\tyC\xa3\x99\x90M\x9a\x0c\xf8h1\xc4\x9c\x88?\x0c\x1c\xc5\xe1\xe3\xe9\x8f\x88-e\x86\xfd\x83\xa1lG\x81\x1c\x1e<\xd8\xca\xf1\xaf\x00\r\x18.\xfe\r!\xa5\x80\xca\x93J\xb9,1*\x17\xe3H\xa9\x7f;\xea\\Kt\xa3\x82\xd9\x1b\xd3\xfe\x85\xbb%\xef\x9f&\x1fh\xf65\x89\xa4F\xdf\x8c\x7fx\xf3\xea\xfd\xb7k\xef?\x0f\xff\xd888C\xeeS\x17b#\xce\x81\xd1\xa1\xed\x1f\xa4E\xa2\x08\x90\xd0\xd3\xc6W\xb0m\xbft\xed\xb1\x02Ko+\x15\x1a\x12\xe0\x19\xd7"\xaa\xdf\x7f\x03\x06\x8c\xf9\xb7\x0c\xdd\xbf\x07\xfffy\xfb\xf7\xe2\xc3\xbbN\tfD\xd3\x81\x17^\x85$$\xcc\x10\xf8\'\xa9\xca\xa9\x7fW\x1e\xdd\xfb\x17\xe2\x1f\x86\x7f\x1c.\x04\xe8\xd0\'\x99\x91\x7f\x07N\xff\xa3\x85\xea\xdf\xa0\x12?\xfa)\xcd\x81\xf0\x0f\xc5?.\xd2;\xa4\xa2\x90N\xdd\x97\x7f\x14\x98\x81\xca\xd2-\xdf?d\xa6\xa6\x1c\xfb\x97\xed\x9f\x85\xe6\xcfE\x17@\x10\x13\x04\xb1\x81\x0c\xcfh\x87@\t%\x8c\xf2\xc3?68\x90A-\xff\\\xe2\xcc\x07\x1b\xd81A\x07\x1b\x00\xc0\xc1?+ \x92\x81\x03\x16\xb8\xf2\x0f\x0fs\xf0 \xc7?=\xfc\x83\xc3:H\xfcC\xc9\x05&\x80\xa3\x81!\x9c\xa8`B=\xffH\xb0\x06\x05\xc5hQ\x08\x84t\xb4h\xc1\x03\x19\x94\xf7\x0f\x1c\xff\xc8\x00\x84\x00\x80\xa8\xa2\xc1$@|\xf0\x0f4g\xac\x10\x06\x05x\x85\xf0\x8d\x8bQ0#\xc6s\xd2\xbc\x00\xcc?*\x1c\xc2\x0f.\xecHQD\x04\x82dBD(\r\xf8sB\n\xc6\xb8\x83E\n\'\x04\xd2\x005\xd8X\xe3D\x04\xb1\xbc\x12\x0f!\x01\x01\x00;'
        invalid = b'GIF89a\x1d\x00\x0f\x00\xf7\x00\x00\xba\xc1\xc8\xa8\xae\xb7\xbc\xc4\xca\xb4\xbb\xc3\xb0\xb7\xbf\xb2\xb9\xc1\xa2\xa8\xb1\xb3\xba\xc2\x97\x9c\xa5\x95\x99\xa2\x8d\x96\x92\x8e\x93\x9c\xa7\xad\xb6\xbb\xc2\xc9\xcb\xd4\xd9\x98\xa1\x9c\xb3\xbb\xbf\xae\xb4\xbd\xb5\xbc\xc4\xa4\xaa\xb3\xc3\xcb\xd0\xb6\xbe\xc2\xa7\xad\xb5\xb7\xbe\xc5\xa9\xb0\xb8\xb1\xb8\xbf\xad\xb4\xbb\xa2\xab\xa6\xc0\xc8\xcd\x94\x99\xa1\xa3\xa9\xb1\x98\x9d\xa5\xbe\xc6\xcc\xb5\xbd\xc1\x9e\xa4\xac\xb4\xbc\xc0\xb2\xba\xbe\xa4\xaa\xb2\x8f\x94\x9d\xa0\xa6\xae\xb8\xc0\xc6\xb9\xc0\xc7\xa9\xaf\xb8\xb7\xbe\xc6\x94\x99\xa2\xac\xb2\xbb\xaa\xb0\xb9\xa3\xa9\xb3\xac\xb3\xbb\xa1\xa7\xb0\xab\xb2\xb9\xad\xb4\xbc\xa0\xa6\xaf\x93\x9b\x97\xb2\xb9\xc0\xb6\xbd\xc5\x94\x98\xa1\xc1\xc9\xce\xb1\xb7\xc0\x8d\x91\x9a\xab\xb1\xba\x99\x9e\xa7\x9a\x9f\xa8\x9d\xa2\xab\x91\x96\x9f\x9f\xa8\xa3\x90\x94\x9d\xc6\xd0\xd5\xaf\xb6\xbd\xc6\xcf\xd4\x9f\xa5\xae\xbb\xc3\xc9\x9e\xa3\xac\xb0\xb6\xbe\xbf\xc7\xcd\xa1\xaa\xa5\xaf\xb4\xbd\xc9\xd3\xd8\x92\x96\xa0\x9f\xa5\xad\x8b\x94\x90\x90\x95\x9e\xb3\xb9\xc1\x9d\xa3\xab\xa0\xa5\xae\xae\xb5\xbd\x9f\xa4\xac\xc5\xce\xd3\x9e\xa3\xab\x8e\x93\x9d\xa9\xae\xb7\xac\xb1\xbb\xae\xb6\xba\x9e\xa7\xa2\xa4\xab\xb1\xa2\xa8\xb0\xae\xb5\xba\x93\x97\xa0\xb2\xb8\xc0\xa5\xaa\xb4\xa4\xa9\xb3\x91\x95\x9e\xcf\xd7\xdc\xb6\xbd\xc6\xa3\xa8\xb1\xa1\xaa\xa6\xac\xb3\xba\xa0\xa9\xa4\x9a\xa3\x9e\x97\xa0\x9b\xae\xb3\xbc\x9b\xa6\x9f\xc3\xcd\xd1\xb9\xc0\xc6\x9b\xa0\xa9\x99\x9e\xa8\xd0\xd9\xdd\xbb\xc1\xc7\xba\xc2\xc8\xa5\xab\xb1\xa9\xaf\xb5\xb1\xb8\xc0\xb6\xbe\xc4\xb9\xc1\xc8\xc9\xd2\xd7\xab\xb2\xba\x9b\x9f\xa8\x8a\x93\x8f\xaa\xb1\xb7\xaa\xb1\xba\xc1\xc9\xcf\x9d\xa7\xa2\x88\x95\x85\x99\x9e\xa6\x87\x8e\x90\xb9\xc0\xc8\x96\x9b\xa4\xb0\xb5\xbd\xb7\xbf\xc6\xad\xb3\xbc\xa0\xa9\xa3\x89\x91\x93\xbd\xc4\xcc\x92\x96\x9f\xbd\xc5\xcb\xa4\xa8\xb1\xca\xd4\xd9\xc0\xc7\xcd\x8e\x96\x93\xa6\xac\xb2\x9b\xa4\x9e\xad\xb4\xb9\x95\x9e\x99\xa7\xac\xb6\xb4\xbc\xc4\x96\x9f\x99\xb1\xb7\xbf\x8d\x97\x92\xc7\xce\xd3\xb4\xbd\xc1\x96\x9a\xa3\xaf\xb8\xbb\x8f\x99\x95\x91\x95\x9f\xa7\xad\xb2\xab\xb2\xb7\x89\x91\x8d\x89\x8d\x97\x8b\x90\x99\xae\xb5\xbc\xc2\xca\xd0\xb1\xb6\xbf\xa3\xa9\xb2\x97\x9d\xa6\xcb\xd3\xd8\x8a\x92\x8f\xa5\xab\xb4\xa8\xae\xb6\xc9\xd0\xd5\xad\xb2\xbc\xa5\xab\xb2\xa2\xa8\xb2\xa7\xac\xb5\xca\xd3\xd8\xb2\xba\xc1\xb1\xb9\xc0\xb6\xbe\xc6\xaf\xb5\xbe\x8d\x93\x9c\xae\xb4\xbe\xb3\xbb\xc3\xae\xb5\xbe\xce\xd8\xdc\xbf\xc6\xcc\x9e\xa5\xad\x91\x96\x9e\x9e\xa4\xad\x8c\x94\x90\xbc\xc4\xcb\x9c\xa1\xa9\x8e\x97\x93\xba\xc2\xc9\xc3\xca\xd1\xb8\xbf\xc5\xa9\xb2\xac\xa1\xa7\xae\x96\x9b\xa5\xa6\xac\xb5\xa3\xa7\xb1\x8b\x93\x91\xc4\xcd\xd2\xa0\xaa\xa2\x96\x9c\xa4\xa5\xae\xaa\x95\x9a\xa2\x8a\x8f\x98\x90\x99\x95\x8c\x90\x99\xb8\xbf\xc6\xba\xc3\xc8\xac\xb2\xbc\xb3\xba\xc1\xbe\xc5\xcc\xad\xb4\xba\x90\x95\x9d\xa9\xaf\xb4\xb0\xb8\xbc\x95\x9b\xa3\xbd\xc5\xca\xb0\xb7\xc0\xcc\xd5\xda\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00!\xf9\x04\x00\x00\x00\x00\x00,\x00\x00\x00\x00\x1d\x00\x0f\x00\x00\x08\xff\x00\x9by\xa9\x84\x07\xd0%0\xa1H@\x800"D\x85\x87!>\x8d\x80@B\x1c\x97o\xa5\xc2\x91\xba3m\x8c--0"\xac\x12s@\xc2\x05\x14)\x004X\x99\xccN\x8a\x0bg\x06\xe0"\x90\x88\x9b\x0b\x06\xd5\x9e\xa9\xe0Q\x85\x80\x94\x017\xe2l\x13@\xce\x9b\x92IJ\x82\x9d\x13p\x04\xc0\x8as\x072$\xe9\xd5\x82Y\x80>\x11t\x9c\xdb\xca\x95+\x05\n\xcaT\t:\x07\x82\xe9\xb9Cz\nl1\xf0\xc0\x85\x9b$\x05\x06(\xaa#\xe0\\\x0e\n\xd2\xae\x14)\xd2u+\x87s:,\xfc`\xb1\xc0\x14\x0f&\x9c|]\x00 \x00\xc498\x9ed5\x91t\xcb\x81\x03WCr\xa0\xd0\xd0\x15\xc8\x02(\xb3"\xe4\x1a\xa0\xad\x01\xa4\xbfC\xf880C\x07\x98\xb9s\xc6l\x9c\x9bpN\xd8\xb1s\xd4:\x80S\xd0bW\x81\xbe\xc0\x1d\xe9:\xb7HF\x80s%\xce!9\x87 A\x19\x05\xbflhZ\xb1\x07\x00\x80s\xcb\xa0\xe6)\xd7M\x02T\x02\xa900\xcd\xa0m\x85\xb9\xb5G\x94jE\xf2\xe0\x01\r\xb4/\xe7^\x9c\xc30#\xc3\x00\t7~s\xb6\x90|y\xf3Q\x9d\xec\xb0\xc00,8\xe3\xc39F\xc8\x87\x01\x0cD\x10\x90\x01\x01D\xccpN\x00\xb0\x18p\xc29s \x82\x83\x10\n\xa0\x92\x85\x13\xa0\xb4r\x0e\x16O\xc4pN,*\x04r\x8e\x06j\xc8p\x0e\x03\xe7\x18@\x83\x08\xe7|0N\x18&\x14s\r/Q\xe0pN!rLq!-\x16\xc0\x18\xc0q\x99\x90a\xc09\xc4\x9c\xd3\xc39\x1dx\xf6\xc7)\xd9\x98pN\x02\x08\xf4\xe0\xc7\x0fFtE\x1b+1\xd0@\x05\x8d>|\x90\xc09B\xec\xd0\x88!\xaf( J\r\x98\xb4\xf1\x80%\x83\x04\xb1F\x1a\x1bl\xb0\xc4\x12\x8c\x04\xd1\xc5\x1bl<\xb0I\r\xd8 \x13\r!\x01\x01\x00;'
        reviewing = b'GIF89a\x1d\x00\x0f\x00\xf7\x00\x00\xf4\xc5+\xf2\xc5/\xf3\xc4+\xfa\xd1+\xee\xa1\x1f\xf7\xcb+\xf5\xc8+\xe8\x96\x1f\xf8\xce+\xf1\xbf+\xe8\x95\x1f\xf0\xa7\x1f\xe9\x98\x1f\xf1\xc1+\xeb\x9c\x1f\xf5\xc9+\xe9\x97\x1f\xe7\x93\x1f\xf7\xb4\x1f\xed\x9f\x1f\xf5\xc7+\xf4\xae\x1f\xf2\xc1+\xf6\xc8+\xef\xbd+\xf1\xa8\x1f\xef\xa5\x1f\xf6\xca+\xf1\xc3/\xf2\xaa\x1f\xf2\xc2+\xf2\xa9\x1f\xf8\xcf+\xe3\x9f-\xe6\xa3-\xf2\xc4/\xea\x99\x1f\xef\xbe/\xe9\xa9.\xec\x9f\x1f\xe6\xa5-\xf6\xb2\x1f\xf3\xad\x1f\xf4\xb0\x1f\xf3\xac\x1f\xf4\xac\x1f\xed\xa0\x1f\xf2\xc0+\xf9\xd0+\xf8\xcc+\xf8\xb7\x1f\xf5\xb1\x1f\xef\xc0/\xf8\xcd+\xed\xbb/\xec\x9d\x1f\xe9\xbd9\xea\x9a\x1f\xf0\xc0/\xfb\xd5+\xfb\xbb\x1f\xef\xbb+\xfd\xc0\x1f\xf7\xb5\x1f\xf4\xc8+\xed\xa1\x1f\xdd\x94,\xf3\xab\x1f\xfe\xc2\x1e\xf3\xc3+\xea\x98\x1f\xf3\xc5,\xf6\xb4\x1f\xf7\xcf,\xf2\xc3,\xef\xa3\x1f\xef\xa4\x1f\xe8\x94\x1f\xfb\xbc\x1f\xf1\xa5\x1f\xf5\xb2\x1f\xf2\xad\x1f\xe6\x92\x1f\xee\xb9+\xe1\x9a,\xdc\x91,\xfb\xd4+\xe4\xa2-\xe7\x91\x1f\xf1\xbe+\xf9\xcf+\xf1\xc1,\xf5\xcb+\xee\xbd/\xfc\xd7+\xe8\x93\x1f\xea\x99\x1e\xf2\xc3+\xe3\xb4;\xe8\xa9-\xe5\xad4\xec\x9e\x1f\xea\xc0:\xed\x9c\x1f\xe2\x9d,\xf1\xa6\x1f\xe8\x96\x1e\xf9\xb6\x1f\xf0\xa7!\xf9\xbd"\xd1\x8c6\xf3\xab\x1e\xe0\x9a,\xe7\xa7-\xfa\xb9\x1f\xe8\xba9\xf5\xc8,\xe6\x90\x1f\xe7\xa6-\xf1\xc0+\xe9\xbc9\xf1\xbd+\xf9\xb8\x1f\xf1\xa9\x1f\xeb\x9b\x1f\xf4\xaf\x1f\xf4\xc7,\xeb\xa4%\xea\x9c \xf7\xb2\x1e\xf0\xc2/\xfc\xbd\x1e\xec\xb8/\xf7\xcc,\xf6\xb3\x1f\xec\xb8.\xf4\xad\x1f\xf7\xcd,\xdf\x8e%\xe5\x8f\x1f\xf2\xc4,\xf4\xc6+\xdc\x91+\xe7\xb88\xfd\xcb%\xe8\xa9.\xfb\xd1*\xee\xbb+\xde\x8d\'\xee\xa0\x1f\xee\xa9$\xe8\x95\x1e\xec\xba/\xf7\xb7\x1f\xf0\xbe+\xf3\xbf(\xf0\xbc*\xeb\x98\x1e\xed\xbc/\xfd\xc7"\xf2\xab\x1f\xea\x9c\x1f\xf6\xcc+\xfa\xb9\x1e\xf1\xb4&\xfc\xd8,\xdf\x97,\xf0\xa5\x1f\xdf\x96,\xdd\x8e&\xf8\xcf,\xf7\xb6\x1f\xfb\xd3+\xe2\x9d-\xfa\xd1,\xe8\xbb9\xf3\xae\x1f\xe6\x8f\x1e\xfb\xc6&\xec\xab$\xf0\xa3\x1f\xf1\xc4/\xf5\xc9,\xe5\xa1-\xf8\xb6\x1e\xe7\x92\x1f\xfa\xbb\x1f\xe7\x92\x1e\xf2\xc5+\xe9\xaa.\xf3\xc2+\xf0\xc1/\xf0\xbe,\xf6\xc9+\xef\xbc+\xed\xac%\xed\xb1&\xf7\xca+\xf6\xcb+\xf5\xaf\x1f\xe8\xa8.\xf4\xc3+\xdc\x90+\xdd\x90*\xfc\xd4*\xf4\xc7+\xfd\xc3 \xf2\xc2,\xed\xa8#\xed\xb9/\xfc\xbe\x1f\xe9\x95\x1f\xe7\xb99\xf2\xa9\x1e\xf3\xc5+\xeb\x9d\x1f\xf5\xad\x1e\xf1\xa7\x1f\xdc\x8f+\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00!\xf9\x04\x00\x00\x00\x00\x00,\x00\x00\x00\x00\x1d\x00\x0f\x00\x00\x08\xff\x00\xc5\x10\x8af\xc3S\t\x1a:~q\xa85"\x80\xc3\x87#8p\x10\xa4\x83F\x89.60\x1dz4E\x98\xa6;\r,\x08\xb0\x06\xa0\x11\x10\x03\x0f.\xa8\xa4\x00\xa4\x19\x00\x01\xbe,4H\x80\xa1\xc7$j=0$\xb0\xe0A\x00\x80m(7\x18\x13U\xa0\xe8\x86\r\x0f\xb6Q\x00P\xc4\x83\x87g[\x80\xcd\xd1\xb9\xad\xaa\xd5\xab\xdb\x10h\xad\x11\xa3\x00P[t\xfc\xf0\xe2D\xec\xcf\xab</\xb6%\x03@!X\xb1\x185\x10\xc0\xd86\xa0\xae\x16\x10\xaa\xb6%2\xb0\x89\x144@\x97b\xe1\xc9\xd2\xa0\x08\x00\x94^A\xc0\x18\xc0\xca\xca\x8e\x1dX\xaf\x9e\x013\xed\x0b\x8e\x04\r\x04D\xb6Z\xca\x0b\xb3m\xb2\xdaH\xd8\xf6&\xdb\xa9m.\x1c@P\x80\xe3E\x18\xcd\\\n%\xd9\xe6j\x80\xa4m\x90>9\xdb6j\xcd\xe8\n\x1d\x16l\xabt\x83\xc4\x013J\x18\x1d\xd9\\u\x10\x11"\xdb\x9c\xc8\xf9\xb1\r\xb8p\x027\x8c\x1c 3l\x96\xa5ml2T\xb5\xdb\x86-\x10\xaem\xd2|\xf8`\x8e\xfa\x1a\x83\x03\xcbv\xa9\xe9\xc4^\x17\x0f\x1e\xdb\xf4d2\xb4M\xc5\x1e\r\xdbL\xc0\x07\x04M(\x13\x01\x049l\x13\x04\x13\xc2\xa9\xd0\x07\x14\xdbH \x83\x0c\xab\xfc\x80\xc4\n\xdb\x80\xb2\xc0\x12A\x94\x91\xc3\x01\x11h\x83\x85\x02\x0c\x84r\x02\x01\x00v\xc0\x02,+\xcc\x90B\n3\x1cSA\x14\xdb\xa4\xa1\x01\x01\'8\xc0\x80\x02R(\xb2H\x04$:0\x01\x01\xdb<\x91\xc1\x07C\xb0\xd0\x02"-\x0c\xf1A\x06\xdb\xd0B\xc0\x04\x0e\x18\x97K\x1dnPR\x85\x10\xa8P\xd1J\x08W\x88\x80\x82\x1d\xc8DbB/&\x8c\x11\x07\n"\xdc\x12\x02\x1ap\x98"\x84#\xa9\x04\x04\x00;'

        queryData = {'AppNo': appNo}
        dumpJsonData = json.dumps(queryData)
        state_url = 'http://www.patentstar.com.cn/my/frmFLZT.aspx?AppNo={}'.format(appNo)
        response = self.session.get(state_url, headers=patent_header, data=dumpJsonData)
        state_str = response.content
        # print(response.status_code)
        # print(response.content)
        if state_str == valid:
            return '有效'
        elif state_str == invalid:
            return '无效'
        elif state_str == reviewing:
            return '审中'
        else:
            print('发现未知状态！')

    def get_response_data(self, response, header):
        content = json.loads(response['d'])
        self.totalNum = content['total']
        content = content['rows']
        columns = ['标题', '法律状态', '申请号', '申请日', '公开号', '公开日', '公告号', '公告日', '主分类', '申请人', '发明人', '摘要']

        data = pd.DataFrame(columns=columns)
        for item in content:
            dataList = []
            dataList.append(item['StrTitle'])
            # 根据专利编号重新请求获取专利法律状态
            str_state = self.get_state(patent_header= header, appNo=item['StrANX'])
            dataList.append(str_state)
            dataList.append(item['StrApNo'])
            dataList.append(item['StrApDate'])
            dataList.append(item['StrPubNo'])
            dataList.append(item['StrPubDate'])
            dataList.append(item['StrAnnNo'])
            dataList.append(item['StrAnnDate'])
            dataList.append(item['StrMainIPC'])
            dataList.append(item['StrApply'])
            dataList.append(item['StrInventor'])
            dataList.append(item['StrAbstr'])

            df2 = pd.DataFrame([dataList], columns=columns)
            data = pd.concat([data, df2])
        # print(data)
        return data


def mk_folder(kw):
    path_json = ".\\json\\batch\\{}".format(kw)
    path_csv = ".\\data\\batch\\{}".format(kw)

    # 判断结果
    if not os.path.exists(path_json):
        # 如果不存在则创建目录
        os.makedirs(path_json)
        print("data文件夹中{}文件夹创建成功！".format(kw))
    else:
        # 如果目录存在则不创建，并提示目录已存在
        print("data文件夹中{}文件夹已存在".format(kw))

    # 判断结果
    if not os.path.exists(path_csv):
        # 如果不存在则创建目录
        os.makedirs(path_csv)
        print("json文件夹中{}文件创建成功！".format(kw))
    else:
        # 如果目录存在则不创建，并提示目录已存在
        print("json文件夹中{}文件夹已存在".format(kw))

    return True

def main(NoNumber, ItemCount, kw):
    # NoNumber = '105'd
    # ItemCount = '80779'
    # kw = 'G11'
    # "http://www.patentstar.com.cn/My/frmPatentList.aspx?db=CN&No=100&kw=G21&Nm=17960&etp=&Query=%20(G21%2FIC)&Qsrc=3"
    patentHeader['Referer'] = 'http://www.patentstar.com.cn/My/frmPatentList.aspx?db=CN&No={}&kw={}&Nm={}&etp=&Query=%20({}%2FIC)&Qsrc=3'.format(NoNumber, kw, ItemCount, kw)
    max_iter = math.ceil(int(ItemCount) / 50) + 1

    crawl = Crawl(url, headers, formData)
    columns = ['标题', '法律状态', '申请号', '申请日', '公开号', '公开日', '公告号', '公告日', '主分类', '申请人', '发明人', '摘要']
    data_all = pd.DataFrame(columns=columns)
    print('正在爬取' + kw + '数据...')
    for i in tqdm(range(1, max_iter)):
        index = i
        patentData = {'Type': 'CN', 'NodeId': NoNumber, 'SourceType': 'FI', 'ItemCount': ItemCount, 'pageindex':  str(i), 'rows': '50',
                      'Sort': 'PD|DESC'}
        dumpJsonData = json.dumps(patentData)
        df = crawl.get_patent(patent_header=patentHeader, patent_url=patentUrl, patent_data=dumpJsonData)
        data_all = pd.concat([data_all, df], ignore_index=True)
    data_all.to_csv('data/{}.csv'.format(kw),  encoding='utf_8_sig')
    data_all.to_json(open('json/{}.json'.format(kw), "w", encoding="utf-8"))


def main_batch(NoNumber, ItemCount, kw):
    mk_folder(kw)

    patentHeader['Referer'] = 'http://www.patentstar.com.cn/My/frmPatentList.aspx?db=CN&No={}&kw={}&Nm={}&etp=&Query=%20({}%2FIC)&Qsrc=3'.format(NoNumber, kw, ItemCount, kw)
    max_iter = math.ceil(int(ItemCount) / 50)
    max_batch = math.ceil(max_iter / 1000)
    iter_end = 1

    crawl = Crawl(url, headers, formData)
    columns = ['标题', '法律状态', '申请号', '申请日', '公开号', '公开日', '公告号', '公告日', '主分类', '申请人', '发明人', '摘要']
    data_all = pd.DataFrame(columns=columns)
    print('正在爬取' + kw + '数据...')

    for j in range(1, max_batch+1):
        print("get patent batch {} / {}...".format(j, max_batch))
        old_iter = iter_end
        iter_end += 1000
        if iter_end > max_iter:
            iter_end = max_iter + 1
        data = pd.DataFrame(columns=columns)
        for i in tqdm(range(old_iter, iter_end)):
            patentData = {'Type': 'CN', 'NodeId': NoNumber, 'SourceType': 'FI', 'ItemCount': ItemCount, 'pageindex':  str(i), 'rows': '50',
                          'Sort': 'PD|DESC'}
            dumpJsonData = json.dumps(patentData)
            df = crawl.get_patent(patent_header=patentHeader, patent_url=patentUrl, patent_data=dumpJsonData)
            data = pd.concat([data, df], ignore_index=True)
            # print(data)
        data.to_csv('data/batch/{}/{}_batch{}.csv'.format(kw, kw, j),  encoding='utf_8_sig')
        data.to_json(open('json/batch/{}/{}_batch{}.json'.format(kw, kw, j), "w", encoding="utf-8"))
        data_all = pd.concat([data_all, data], ignore_index=True)
    data_all.to_csv('data/{}.csv'.format(kw), encoding='utf_8_sig')
    data_all.to_json(open('json/{}.json'.format(kw), "w", encoding="utf-8"))


if __name__ == '__main__':
    NoNumber = '136'
    ItemCount = '58478'
    kw = 'G10'
    main_batch(NoNumber, ItemCount, kw)